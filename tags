!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ActiveRecordStub	spec/enumerate_it_spec.rb	/^        class ActiveRecordStub$/;"	c
ActiveRecordStub	spec/enumerate_it_spec.rb	/^      class ActiveRecordStub$/;"	c
Base	lib/enumerate_it.rb	/^  class Base$/;"	c	class:EnumerateIt
BaseClass	spec/enumerate_it_spec.rb	/^class BaseClass$/;"	c
ClassMethods	lib/enumerate_it.rb	/^  module ClassMethods$/;"	m	class:EnumerateIt
EnumerateIt	lib/enumerate_it.rb	/^module EnumerateIt$/;"	m
EnumerateIt	lib/version.rb	/^module EnumerateIt$/;"	m
FooBar	spec/enumerate_it_spec.rb	/^        class FooBar$/;"	c
Foobar	spec/enumerate_it_spec.rb	/^class Foobar < EnumerateIt::Base$/;"	c
SomeClass	spec/enumerate_it_spec.rb	/^        class SomeClass < BaseClass$/;"	c
TestClass	spec/enumerate_it_spec.rb	/^        class TestClass$/;"	c
TestClass	spec/enumerate_it_spec.rb	/^      class TestClass$/;"	c
TestClass	spec/enumerate_it_spec.rb	/^    class TestClass$/;"	c
TestClassForEnumerationWithoutArray	spec/enumerate_it_spec.rb	/^        class TestClassForEnumerationWithoutArray$/;"	c
TestEnumeration	spec/enumerate_it_spec.rb	/^class TestEnumeration < EnumerateIt::Base$/;"	c
TestEnumerationWithExtendedBehaviour	spec/enumerate_it_spec.rb	/^class TestEnumerationWithExtendedBehaviour < EnumerateIt::Base$/;"	c
TestEnumerationWithoutArray	spec/enumerate_it_spec.rb	/^class TestEnumerationWithoutArray < EnumerateIt::Base$/;"	c
associate_values	lib/enumerate_it.rb	/^    def self.associate_values(values_hash)$/;"	F	class:EnumerateIt.Base
create_enumeration_humanize_method	lib/enumerate_it.rb	/^    def create_enumeration_humanize_method(klass, attribute_name)$/;"	f	class:EnumerateIt.ClassMethods
create_helper_methods	lib/enumerate_it.rb	/^    def create_helper_methods(klass, attribute_name)$/;"	f	class:EnumerateIt
create_mutator_methods	lib/enumerate_it.rb	/^    def create_mutator_methods(klass, attribute_name)$/;"	f
create_scopes	lib/enumerate_it.rb	/^    def create_scopes(klass, attribute_name)$/;"	f
define_enumeration_class	lib/enumerate_it.rb	/^    def define_enumeration_class(attribute, options)$/;"	f
define_enumeration_constant	lib/enumerate_it.rb	/^    def self.define_enumeration_constant(name, value)$/;"	F	class:EnumerateIt.Base
enumerate_it.rb	lib/enumerate_it.rb	1;"	F
enumerate_it_spec.rb	spec/enumerate_it_spec.rb	1;"	F
enumeration	lib/enumerate_it.rb	/^    def self.enumeration$/;"	F	class:EnumerateIt.Base
enumerations	lib/enumerate_it.rb	/^    def enumerations$/;"	f	class:EnumerateIt.ClassMethods
has_enumeration_for	lib/enumerate_it.rb	/^    def has_enumeration_for(attribute, options = {})$/;"	f	class:EnumerateIt.ClassMethods
included	lib/enumerate_it.rb	/^  def self.included(receiver)$/;"	F
initialize	spec/enumerate_it_spec.rb	/^          def initialize(foobar); @foobar = foobar; end$/;"	f	class:TestClassForEnumerationWithoutArray
initialize	spec/enumerate_it_spec.rb	/^          def initialize(test_enumeration_value)$/;"	f	class:FooBar
initialize	spec/enumerate_it_spec.rb	/^      def initialize(foobar); @foobar = foobar; end$/;"	f	class:TestClass
list	lib/enumerate_it.rb	/^    def self.list$/;"	F	class:EnumerateIt.Base
normalize_enumeration	lib/enumerate_it.rb	/^    def self.normalize_enumeration(values_hash)$/;"	F	class:EnumerateIt.Base
register_enumeration	lib/enumerate_it.rb	/^    def self.register_enumeration(values_hash)$/;"	F	class:EnumerateIt.Base
scope	spec/enumerate_it_spec.rb	/^          def self.scope(name, whatever); end$/;"	F	class:TestClass
set_validations	lib/enumerate_it.rb	/^    def set_validations(attribute, options)$/;"	f
setup_enumeration	spec/enumerate_it_spec.rb	/^    def setup_enumeration$/;"	f
spec_helper.rb	spec/spec_helper.rb	1;"	F
store_enumeration	lib/enumerate_it.rb	/^    def store_enumeration(klass, attribute)$/;"	f	class:EnumerateIt.ClassMethods
t	lib/enumerate_it.rb	/^    def self.t(value)$/;"	F	class:EnumerateIt.Base
to_a	lib/enumerate_it.rb	/^    def self.to_a$/;"	F	class:EnumerateIt.Base
to_a	spec/enumerate_it_spec.rb	/^  def self.to_a$/;"	F	class:TestEnumerationWithExtendedBehaviour
to_range	lib/enumerate_it.rb	/^    def self.to_range$/;"	F	class:EnumerateIt.Base
translate	lib/enumerate_it.rb	/^    def self.translate(value)$/;"	F	class:EnumerateIt.Base
validates_inclusion_of	spec/enumerate_it_spec.rb	/^          def validates_inclusion_of(options); true; end$/;"	f	class:ActiveRecordStub
validates_presence_of	spec/enumerate_it_spec.rb	/^          def validates_presence_of; true; end$/;"	f	class:ActiveRecordStub
values_for	lib/enumerate_it.rb	/^    def self.values_for(values)$/;"	F	class:EnumerateIt.Base
version.rb	lib/version.rb	1;"	F
where	spec/enumerate_it_spec.rb	/^          def self.where(whatever); end$/;"	F	class:TestClass
